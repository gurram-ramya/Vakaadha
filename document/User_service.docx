Users Service: Complete Plan (Ecommerce paltform like Myntra and flipkart has following Style)
1. Database (✅ already done, just summarizing)

users

Identity: user_id, email, phone, firebase_uid

Security: password_hash, status, last_login

Roles: role (customer, admin, seller, support, delivery)

Timestamps: created_at

user_profiles

Extended info: dob, gender, avatar_url

FK to users

addresses (coming soon for profile/checkout)

address_id, user_id, line1, line2, city, state, country, zip, type (shipping/billing)

2. API Endpoints (Flask → routes/)
🔐 Auth

POST /signup

Input: { email, phone?, password, name }

Output: { token, user }

Auto-creates blank user_profile.

POST /login

Input: { email, password }

Output: { token, user }

Updates last_login.

POST /logout

Clears token.

GET /me

Returns current authenticated user.

👤 Profile

GET /users/me/profile

Returns { user, profile }.

PUT /users/me/profile

Input: { name, dob, gender, avatar_url }

Updates profile info.

📍 Addresses

GET /users/me/addresses

POST /users/me/addresses

Input: { line1, city, state, country, zip, type }

PUT /users/me/addresses/:id

DELETE /users/me/addresses/:id

🛠️ Admin

GET /admin/users

List all users.

PUT /admin/users/:id

Update role/status.

DELETE /admin/users/:id

Delete user (cascade to profile/addresses).

3. Domain Logic (domain/users/service.py)

Encapsulates business rules (like Amazon/Flipkart):

Auth

create_user(email, phone, password, name)

authenticate_user(email, password)

update_last_login(user_id)

Profiles

get_user_with_profile(user_id)

update_user_profile(user_id, data)

Addresses

list_addresses(user_id)

create_address(user_id, data)

update_address(user_id, addr_id, data)

delete_address(user_id, addr_id)

Admin

list_users()

update_user_role(user_id, role, status)

delete_user(user_id)

4. Auth Utils (utils/auth.py)

In-memory TOKENS = { token → user_id } (dev-mode).

generate_token(user_id)

require_auth decorator → validates Bearer token.

require_admin decorator → validates role.

5. Frontend Flows
🧑 Customer Flows

Signup Page (signup.html + signup.js)

Inputs: email, phone, password, name.

Calls /signup.

Login Page (login.html + auth.js)

Inputs: email, password.

Calls /login.

Profile Page (profile.html + profile.js)

Fetches /users/me/profile.

Edit profile → /users/me/profile.

Addresses Page (addresses.html + addresses.js)

List, add, edit, delete addresses.

🛠️ Admin Flows

Admin Dashboard (admin.html + admin.js)

View all users (/admin/users).

Promote/demote roles.

Block/unblock users.

Delete users.

6. Extra (Future-Proofing Like Amazon/Flipkart)

Later we can extend:

🔑 Multi-factor Auth (OTP via SMS/email).

🔗 Social login (Google, Apple).

📊 User Analytics (last login, order count).

🔒 Fraud checks (status = "blocked").

🔹 Execution Order

Backend

Implement utils/auth.py.

Implement domain/users/service.py.

Implement routes/users.py with Auth endpoints.

Frontend

Build signup.html, login.html with auth.js.

Build profile.html + profile.js.

Build admin.html + admin.js.

Addresses (backend + frontend).

Admin workflows (user management).